{"remainingRequest":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Presupuestos/U2_Presupuestos/src/views/curso/Tema1.vue?vue&type=template&id=0d7b1bbc&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/src/views/curso/Tema1.vue","mtime":1740799664048},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}