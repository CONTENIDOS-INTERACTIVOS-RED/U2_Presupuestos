{"remainingRequest":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Presupuestos/U2_Presupuestos/src/views/curso/Tema2.vue?vue&type=template&id=d528838e&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/src/views/curso/Tema2.vue","mtime":1740799664049},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Presupuestos/U2_Presupuestos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gQW7DoWxpc2lzIHkgY8OhbGN1bG8gZGUgY29zdG9zIGVuIGxhIHByb2R1Y2Npw7NuIHkgdmVudGFzJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWg4NS5tYi01CiAgICAgIC5weC00LnAtbWQtNSAgICAgCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy05KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgcC5tdC01IEVsIGFuw6FsaXNpcyB5IGPDoWxjdWxvIGRlIGNvc3RvcyBlbiBsYSBwcm9kdWNjacOzbiB5IHZlbnRhcyBlcyB1biBwcm9jZXNvIGVzZW5jaWFsIHBhcmEgZXZhbHVhciBsYSB2aWFiaWxpZGFkIGVjb27Ds21pY2EgZGUgbGFzIG9wZXJhY2lvbmVzIGVtcHJlc2FyaWFsZXMuIExhIGlkZW50aWZpY2FjacOzbiB5IGV2YWx1YWNpw7NuIGRlIGxvcyBkaXN0aW50b3MgY29tcG9uZW50ZXMgZGUgY29zdG9zLCBjb21vIGxvcyBjb3N0b3MgZmlqb3MgeSB2YXJpYWJsZXMsIHNlIGZ1bmRhbWVudGEgZW4gZXN0dWRpb3MgdGXDs3JpY29zIHkgcHLDoWN0aWNvcy4gTGEgaW50ZWdyYWNpw7NuIGRlIGVzdGEgaW5mb3JtYWNpw7NuIGVuIGxhIHBsYW5pZmljYWNpw7NuIGZpbmFuY2llcmEgcGVybWl0ZSBkZXRlcm1pbmFyIGNvbiBwcmVjaXNpw7NuIGVsIGNvc3RvIHVuaXRhcmlvIGRlIGxvcyBwcm9kdWN0b3MsIGxvIHF1ZSByZXN1bHRhIGNsYXZlIHBhcmEgZmlqYXIgcHJlY2lvcyBjb21wZXRpdGl2b3MgeSBnYXJhbnRpemFyIGxhIHJlbnRhYmlsaWRhZC4KICAgICAgICAgICAgcCBFbCBhbsOhbGlzaXMgZGUgY29zdG9zIGltcGxpY2EgbGEgc3VtYSBkZSBnYXN0b3MgZGlyZWN0b3MgZSBpbmRpcmVjdG9zLCBhc8OtIGNvbW8gbGEgYXBsaWNhY2nDs24gZGUgbcOpdG9kb3MgY29udGFibGVzIGNvbW8gZWwgY29zdGVvIHBvciBhYnNvcmNpw7NuIHkgZWwgY29zdGVvIHZhcmlhYmxlLCBsb3MgY3VhbGVzIGZhY2lsaXRhbiBsYSBjb21wYXJhY2nDs24gZW50cmUgbG8gcGxhbmlmaWNhZG8geSBsbyBlamVjdXRhZG8uCgogICAgICAgICAgLmNvbC1sZy0zKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgaW1nLmltZy1mbHVpZChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzEuc3ZnJywgc3R5bGU9Im1heC13aWR0aDo0ODZweCIsIGFsdD0iIiApLm14LWF1dG8ubXgtbGctMC5tcy1sZy1hdXRvLm1iLTQubWItbGctMAogICAgCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWplbXBsbyBwcsOhY3RpY286IGPDoWxjdWxvIGRlbCBjb3N0byBkZSBwcm9kdWNjacOzbiBkZSB1biBsb3RlCiAgICBwLm1iLTUgQWwgY29uc2lkZXJhciBsb3MgZ2FzdG9zIGVuIG1hdGVyaWEgcHJpbWEsIG1hbm8gZGUgb2JyYSB5IGNvc3RvcyBnZW5lcmFsZXMsIHNlIG9idGllbmUgZWwgY29zdG8gdW5pdGFyaW8sIGVsIGN1YWwgc2UgdXNhIHBhcmEgZXZhbHVhciBsb3MgbcOhcmdlbmVzIGRlIGdhbmFuY2lhIHkgZGVmaW5pciBlc3RyYXRlZ2lhcyBkZSBwcmVjaW9zLgoKICAgIC50aXR1bG8tZmlndXJhLm1iLTQKICAgICAgaDUgVGFibGEgNC4KICAgICAgc3BhbiBDw6FsY3VsbyBkZWwgY29zdG8gdW5pdGFyaW8gZGUgcHJvZHVjY2nDs24KICAgIC5yb3cubWItNS5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctMTAKICAgICAgICAudGFibGEtYS5jb2xvci1hY2VudG8tYm90b25lcwogICAgICAgICAgdGFibGUKICAgICAgICAgICAgdGhlYWQKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGgudGV4dC1jZW50ZXIuYmctY29sb3ItMy50ZXh0LXdoaXRlKHdpZHRoPSIzMCUiKSBDb25jZXB0bwogICAgICAgICAgICAgICAgdGgudGV4dC1jZW50ZXIuYmctY29sb3ItMy50ZXh0LXdoaXRlIEPDoWxjdWxvCiAgICAgICAgICAgICAgICB0aC50ZXh0LWNlbnRlci5iZy1jb2xvci0zLnRleHQtd2hpdGUod2lkdGg9IjMwJSIpIFZhbG9yCiAgICAgICAgICAgIHRib2R5CiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLnRleHQtYm9sZCBDb3N0byBkZSBtYXRlcmlhIHByaW1hCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciAtCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciAkNSwwMDAKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQudGV4dC1ib2xkIENvc3RvIGRlIG1hbm8gZGUgb2JyYQogICAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIgLQogICAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIgJDMsMDAwCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLnRleHQtYm9sZCBDb3N0b3MgZ2VuZXJhbGVzCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciAtCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciAkMiwwMDAKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQudGV4dC1ib2xkIENvc3RvIHRvdGFsIGRlIHByb2R1Y2Npw7NuCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciAkNSwwMDAgKyAkMywwMDAgKyAkMiwwMDAKICAgICAgICAgICAgICAgIHRkLnRleHQtY2VudGVyLnRleHQtYm9sZCAkMTAsMDAwCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLnRleHQtYm9sZCBVbmlkYWRlcyBwcm9kdWNpZGFzCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciAtCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciAkMiwwMDAKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQudGV4dC1ib2xkIENvc3RvIHVuaXRhcmlvIGRlIHByb2R1Y2Npw7NuCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciAkMTAsMDAwIMO3IDIsMDAwCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlci50ZXh0LWJvbGQgJDUgcG9yIHVuaWRhZAoKICAgICAgICBkaXYucC01LmJnLWNvbG9yLTEwCiAgICAgICAgICBwLm1iLTAgTGEgYXBsaWNhY2nDs24gZGUgZXN0b3MgbcOpdG9kb3MgZW4gbGEgZWxhYm9yYWNpw7NuIGRlIHByZXN1cHVlc3RvcyBkZSBwcm9kdWNjacOzbiB5IHZlbnRhcyBwZXJtaXRlIHByb3llY3RhciBsYSByZW50YWJpbGlkYWQgeSBvcHRpbWl6YXIgbGEgYXNpZ25hY2nDs24gZGUgcmVjdXJzb3MuIEFkZW3DoXMsIGVsIHVzbyBkZSBoZXJyYW1pZW50YXMgdGVjbm9sw7NnaWNhcyBjb21vIDxiPkV4Y2VsPC9iPiBtZWpvcmEgbGEgcHJlY2lzacOzbiBkZSBsb3MgY8OhbGN1bG9zIHkgZmFjaWxpdGEgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVzdHJhdMOpZ2ljYXMsIGZvcnRhbGVjaWVuZG8gbGEgZWZpY2llbmNpYSBvcGVyYXRpdmEgeSBsYSBzb3N0ZW5pYmlsaWRhZCBmaW5hbmNpZXJhIGRlIGxhIG9yZ2FuaXphY2nDs24uCgogICAgI3RfMl8xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuMV0gSWRlbnRpZmljYWNpw7NuIHkgY2xhc2lmaWNhY2nDs24gZGUgY29zdG9zIGRlIHByb2R1Y2Npw7NuIHkgdmVudGFzCiAgICAKCiAgICBwLm1iLTQgTGEgaWRlbnRpZmljYWNpw7NuIHkgY2xhc2lmaWNhY2nDs24gZGUgY29zdG9zIGRlIHByb2R1Y2Npw7NuIHkgdmVudGFzIGVzIHVuYSBoZXJyYW1pZW50YSBjbGF2ZSBwYXJhIG9wdGltaXphciBsYSBhc2lnbmFjacOzbiBkZSByZWN1cnNvcyB5IG1lam9yYXIgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVuIGxhIGdlc3Rpw7NuIGVtcHJlc2FyaWFsLiBFcyBmdW5kYW1lbnRhbCBkaWZlcmVuY2lhciBlbnRyZSA8Yj5jb3N0b3MgZmlqb3MgeSB2YXJpYWJsZXM8L2I+LCBhc8OtIGNvbW8gZW50cmUgPGI+Y29zdG9zIGRpcmVjdG9zIGUgaW5kaXJlY3RvczwvYj4sIHlhIHF1ZSBlc3RhIGNsYXNpZmljYWNpw7NuIHBlcm1pdGUgYW5hbGl6YXIgbGEgZXN0cnVjdHVyYSBkZSBnYXN0b3MgZGUgbWFuZXJhIGludGVncmFsLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlci5tYi01CiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgZmlndXJlCiAgICAgICAgICAudmlkZW8KICAgICAgICAgICAgaWZyYW1lKHdpZHRoPSI1NjAiIGhlaWdodD0iMzE1IiBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLzljcUx3cVdEQ3pzP3NpPUYxYjJNNlNsTFJuR3FGZjkiIHRpdGxlPSJZb3VUdWJlIHZpZGVvIHBsYXllciIgZnJhbWVib3JkZXI9IjAiIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIiBhbGxvd2Z1bGxzY3JlZW4pCiAgICAKICAgIGgyLm1iLTUoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVqZW1wbG8gcHLDoWN0aWNvOgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTgub3JkZXItMgogICAgICAgIHAubWItMCBFbiB1bmEgZW1wcmVzYSBtYW51ZmFjdHVyZXJhIGRlZGljYWRhIGEgbGEgcHJvZHVjY2nDs24gZGUgYm90ZWxsYXMgZGUgcGzDoXN0aWNvLCBzZSBpZGVudGlmaWNhbiBsb3Mgc2lndWllbnRlcyBlbGVtZW50b3M6CiAgICAgICAgZGl2LmJnLWg4NS00LnB4LTUKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1lbmQKICAgICAgICAgICAgLmNvbC1sZy02KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi0zLm1iLWxnLTAuYWxpZ24tY29udGVudC1lbmQKICAgICAgICAgICAgICBoNSBDb3N0b3MgZGlyZWN0b3MKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOQogICAgICAgICAgICAgICAgICBwLm1iLTAgTWF0ZXJpYSBwcmltYSAocmVzaW5hIHBsw6FzdGljYSkuCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTkKICAgICAgICAgICAgICAgICAgcC5tYi0wIE1hbm8gZGUgb2JyYSBkaXJlY3RhIGVuIGxhIGzDrW5lYSBkZSBwcm9kdWNjacOzbi4KICAgICAgICAgICAgICBoNSBDb3N0b3MgaW5kaXJlY3RvcwogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICAgIHAubWItMCBEZXByZWNpYWNpw7NuIGRlIGxhIG1hcXVpbmFyaWEuCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTkKICAgICAgICAgICAgICAgICAgcC5tYi0wIEdhc3RvcyBkZSBtYW50ZW5pbWllbnRvIHkgYWRtaW5pc3RyYWNpw7NuLgoKICAgICAgICAgICAgLmNvbC1sZy02KGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcuaW1nLWZsdWlkKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvMy5zdmcnLCBzdHlsZT0ibWF4LXdpZHRoOjQ4NnB4IiwgYWx0PSIiICkubXgtYXV0by5teC1sZy0wLm1zLWxnLWF1dG8ubWItNC5tYi1sZy0wCiAgICAgICAgCiAgICAgICAgZGl2LnAtNS5iZy1jb2xvci0xMAogICAgICAgICAgcC5tYi0wIEVzdGUgZW5mb3F1ZSBwZXJtaXRlIGEgbGFzIGVtcHJlc2FzIGNvbXByZW5kZXIgbWVqb3Igc3UgZXN0cnVjdHVyYSBkZSBjb3N0b3MgeSB0b21hciBkZWNpc2lvbmVzIG3DoXMgYWNlcnRhZGFzIHBhcmEgbWVqb3JhciBsYSByZW50YWJpbGlkYWQgeSBsYSBlZmljaWVuY2lhIG9wZXJhdGl2YS4KCiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAub3JkZXItMQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMi5wbmciLCBhbHQ9IiIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgIAogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBGaWd1cmEgMi4gCiAgICAgIHNwYW4gQ2xhc2lmaWNhY2nDs24gZGUgY29zdG9zLiAKCiAgICBkaXYucC01LmJnLWNvbG9yLTE1Lm1iLTUKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNC5zdmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTcKICAgICAgICBwICBBc2ltaXNtbywgc2UgZGlzdGluZ3VlbiBsb3MgY29zdG9zIGZpam9zLCBjb21vIGVsIGFscXVpbGVyIGRlIGxhIHBsYW50YSwgcXVlIHNlIG1hbnRpZW5lbiBjb25zdGFudGVzIGluZGVwZW5kaWVudGVtZW50ZSBkZWwgdm9sdW1lbiBkZSBwcm9kdWNjacOzbiwgeSBsb3MgY29zdG9zIHZhcmlhYmxlcywgY29tbyBlbCBjb25zdW1vIGRlIGVuZXJnw61hLCBxdWUgZmx1Y3TDumFuIGVuIGZ1bmNpw7NuIGRlbCBuaXZlbCBkZSBhY3RpdmlkYWQgcHJvZHVjdGl2YS4KICAgICAgICAgIAogICAgICAgIC5weS00LnB4LTUuYmctY29sb3ItNC5tYi0zKGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgICAgIHAubWItMCBMYSBpZGVudGlmaWNhY2nDs24gcHJlY2lzYSBkZSBlc3RvcyBlbGVtZW50b3MgcGVybWl0ZSBkZXRlcm1pbmFyIGVsIGNvc3RvIHVuaXRhcmlvIGRlIHByb2R1Y2Npw7NuLCBsbyBxdWUgZXMgZnVuZGFtZW50YWwgcGFyYSBlc3RhYmxlY2VyIHByZWNpb3MgZGUgdmVudGEgY29tcGV0aXRpdm9zIHkgZGVzYXJyb2xsYXIgcHJlc3VwdWVzdG9zIHF1ZSByZWZsZWphbiBkZSBtYW5lcmEgZmllbCBsYSByZWFsaWRhZCBmaW5hbmNpZXJhIGRlIGxhIG9yZ2FuaXphY2nDs24uCiAgICAgIC5jb2wtbGctNS5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzUucG5nIiwgYWx0PSIiLCBkYXRhLWFvcz0iem9vbS1pbiIpCgogICAgI3RfMl8yLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuMl0gR2VzdGnDs24gZGUgaW52ZW50YXJpb3MgZW4gbGEgcHJvZHVjY2nDs24KICAgIAogICAgcC5tYi00IExhIGdlc3Rpw7NuIGRlIGludmVudGFyaW9zIGVuIGxhIHByb2R1Y2Npw7NuIGVzIGNsYXZlIHBhcmEgZ2FyYW50aXphciBsYSBlZmljaWVuY2lhIG9wZXJhdGl2YSB5IGxhIGNvbnRpbnVpZGFkIGRlIGxhcyBhY3RpdmlkYWRlcyBwcm9kdWN0aXZhcy4gVW5hIGFkbWluaXN0cmFjacOzbiBhZGVjdWFkYSBkZSBsb3MgaW52ZW50YXJpb3MgcGVybWl0ZToKCiAgICAucm93Lm1iLTUuYWxpbmcKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMChkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgICAgLnRhcmpldGEuYmctY29sb3ItMy5wLTQudGV4dC13aGl0ZS5oLTEwMAogICAgICAgICAgaDUgMDEKICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBPcHRpbWl6YXIgZWwgZmx1am8gZGUgbWF0ZXJpYWxlcy4KICAgIAogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wKGRhdGEtYW9zPSJmYWRlLWRvd24iKQogICAgICAgIC50YXJqZXRhLmJnLWNvbG9yLTUucC00LmgtMTAwCiAgICAgICAgICBoNSAwMgogICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIFJlZHVjaXIgY29zdG9zIGRlIGFsbWFjZW5hbWllbnRvLgogICAgCiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAgIC50YXJqZXRhLmJnLWNvbG9yLTcucC00LmgtMTAwCiAgICAgICAgICBoNSAwMwogICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIE1pbmltaXphciBww6lyZGlkYXMgcG9yIG9ic29sZXNjZW5jaWEgbyBleGNlc28gZGUgc3RvY2suCiAgICAKCiAgICBwLm1iLTQgTGEgaW50ZWdyYWNpw7NuIGRlIHNpc3RlbWFzIGRlIGNvbnRyb2wgZmFjaWxpdGEgbGEgcGxhbmlmaWNhY2nDs24sIGVqZWN1Y2nDs24geSBtb25pdG9yZW8gZGUgbG9zIG5pdmVsZXMgZGUgaW52ZW50YXJpbywgcHJvcG9yY2lvbmFuZG8gZGF0b3MgcHJlY2lzb3MgcGFyYSBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcy4gRW50cmUgbGFzIHByaW5jaXBhbGVzIHTDqWNuaWNhcyBkZSBnZXN0acOzbiBkZSBpbnZlbnRhcmlvcyBzZSBlbmN1ZW50cmFuOgoKICAgIC5iZy1mdWxsLXdpZHRoLTIuYmctZm9uZG8tMQogICAgICAucHgtNC5weC1tZC01LnBiLW1kLTMKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzYucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBKdXN0byBhIHRpZW1wbyAoSklUKQogICAgICAgICAgICAgICAgcC5tYi0wIFJlZHVjZSBsb3Mgbml2ZWxlcyBkZSBpbnZlbnRhcmlvLCBwZXJtaXRpZW5kbyByZWNpYmlyIGluc3Vtb3Mgw7puaWNhbWVudGUgY3VhbmRvIHNlIG5lY2VzaXRhbiBwYXJhIGxhIHByb2R1Y2Npw7NuLgogICAgICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzcucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBTaXN0ZW1hIGRlIHJldmlzacOzbiBjb250aW51YQogICAgICAgICAgICAgICAgcC5tYi0wIENvbnRyb2xhIGxvcyBuaXZlbGVzIGRlIGludmVudGFyaW8gZW4gdGllbXBvIHJlYWwgeSByZWFsaXphIHBlZGlkb3MgY3VhbmRvIGVsIDxlbT5zdG9jazwvZW0+IGNhZSBwb3IgZGViYWpvIGRlIHVuIHVtYnJhbCBkZXRlcm1pbmFkby4KICAgICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi84LnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgUGxhbmlmaWNhY2nDs24gZGUgcmVxdWVyaW1pZW50b3MgZGUgbWF0ZXJpYWxlcyAoTVJQKQogICAgICAgICAgICAgICAgcC5tYi0wIENvb3JkaW5hIGxhIGFkcXVpc2ljacOzbiBkZSBpbnN1bW9zIGNvbiBiYXNlIGVuIGxhIGRlbWFuZGEgcHJveWVjdGFkYSB5IGxvcyB0aWVtcG9zIGRlIGVudHJlZ2EgZGUgcHJvdmVlZG9yZXMuCiAgICAgICAgCiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVqZW1wbG8gcHLDoWN0aWNvOiBnZXN0acOzbiBkZSBpbnZlbnRhcmlvcyBlbiB1bmEgZW1wcmVzYSBkZSBkaXNwb3NpdGl2b3MgZWxlY3Ryw7NuaWNvcwogICAgICAgIHAubWItNSBFbiB1bmEgZW1wcmVzYSBkZSBmYWJyaWNhY2nDs24gZGUgZGlzcG9zaXRpdm9zIGVsZWN0csOzbmljb3MsIHNlIGVzdGFibGVjZSB1biBuaXZlbCBtw61uaW1vIGRlIDxlbT5zdG9jazwvZW0+IHBhcmEgY29tcG9uZW50ZXMgY3LDrXRpY29zLCBjb21vIDxiPm1pY3JvY2hpcHMgeSBwYW50YWxsYXM8L2I+LCBnYXJhbnRpemFuZG8gbGEgY29udGludWlkYWQgZGUgbGEgcHJvZHVjY2nDs24uCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctOC5vcmRlci0yCiAgICAgICAgLnB5LTQucHgtNS5iZy1jb2xvci0xLm1iLTMoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAgICAgcC5tYi0wIFBhcmEgY2FsY3VsYXIgZWwgaW52ZW50YXJpbyBkZSBzZWd1cmlkYWQsIHNlIGFuYWxpemEgZWwgaGlzdG9yaWFsIGRlIGNvbnN1bW8geSBsYSB2YXJpYWJpbGlkYWQgZW4gZWwgc3VtaW5pc3RybywgYXNlZ3VyYW5kbyByZXNwdWVzdGEgcsOhcGlkYSBhbnRlIGZsdWN0dWFjaW9uZXMgZW4gbGEgZGVtYW5kYSBvIHJldHJhc29zIGVuIGVudHJlZ2FzLgogICAgICAgIHAgTGEgaW5jb3Jwb3JhY2nDs24gZGUgaGVycmFtaWVudGFzIHRlY25vbMOzZ2ljYXMsIGNvbW8gaG9qYXMgZGUgY8OhbGN1bG8gYXZhbnphZGFzIHkgPGVtPnNvZnR3YXJlPC9lbT4gZXNwZWNpYWxpemFkbywgcGVybWl0ZSBtb25pdG9yZWFyIGxvcyBpbnZlbnRhcmlvcyBlbiB0aWVtcG8gcmVhbCwgZXZpdGFuZG8gdGFudG8gbGEgZXNjYXNleiBjb21vIGVsIGV4Y2VzbyBkZSBwcm9kdWN0b3MgeSBvcHRpbWl6YW5kbyBhc8OtIGxvcyByZWN1cnNvcyB5IGxhIHJlbnRhYmlsaWRhZCBkZSBsYSBwcm9kdWNjacOzbi4KICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMC5vcmRlci0xCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi85LnBuZyIsIGFsdD0iIiwgZGF0YS1hb3M9Inpvb20taW4iKQoKCiAgICAjdF8yXzMudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi4zXSBFdmFsdWFjacOzbiBkZSBjb3N0b3MgcGFyYSBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcwoKICAgIHAubWItNCBMYSBldmFsdWFjacOzbiBkZSBjb3N0b3MgZW4gbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVzdHJhdMOpZ2ljYXMgZXMgdW4gcHJvY2VzbyBjbGF2ZSBlbiBsYSBnZXN0acOzbiBmaW5hbmNpZXJhLCB5YSBxdWUgcGVybWl0ZToKCiAgICAucm93Lm1iLTMKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGRpdi5iZy1jb2xvci0xMi5wLTMKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEwLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgRGV0ZXJtaW5hciBsYSB2aWFiaWxpZGFkIGRlIHByb3llY3Rvcy4KICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGRpdi5iZy1jb2xvci0xMi5wLTMKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEwLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgT3B0aW1pemFyIGxhIGFzaWduYWNpw7NuIGRlIHJlY3Vyc29zLgogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgZGl2LmJnLWNvbG9yLTEyLnAtMwogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTAuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBFc3RhYmxlY2VyIGVzdHJhdGVnaWFzIGNvbXBldGl0aXZhcy4KICAgIAogICAgcC5tYi01IEVzdGUgYW7DoWxpc2lzIGltcGxpY2EgbGEgcmVjb3BpbGFjacOzbiBkZSBkYXRvcyBoaXN0w7NyaWNvcyB5IGFjdHVhbGVzIHBhcmEgcHJveWVjdGFyIGVzY2VuYXJpb3MgZnV0dXJvcyB5IGRlZmluaXIgcHJlc3VwdWVzdG9zIHJlYWxpc3Rhcy4KCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWplbXBsbyBwcsOhY3RpY286IGV2YWx1YWNpw7NuIGRlIGNvc3RvcyBwYXJhIHVuYSBudWV2YSBsw61uZWEgZGUgcHJvZHVjdG9zCiAgICBwLm1iLTUgVW5hIGVtcHJlc2EgZGVzZWEgbGFuemFyIHVuYSBudWV2YSBsw61uZWEgZGUgcHJvZHVjdG9zIHkgZGViZSBldmFsdWFyIGxvcyBjb3N0b3MgZGUgcHJvZHVjY2nDs24sIGNvbW8gbWF0ZXJpYSBwcmltYSwgbWFubyBkZSBvYnJhIHkgZ2FzdG9zIGluZGlyZWN0b3MuIEEgcGFydGlyIGRlIGVzdG9zIGPDoWxjdWxvcywgc2UgZGV0ZXJtaW5hIGVsIGNvc3RvIHVuaXRhcmlvIHkgZWwgcHJlY2lvIGRlIHZlbnRhIGNvbXBldGl0aXZvLgoKICAgIC50aXR1bG8tZmlndXJhLm1iLTQKICAgICAgaDUgVGFibGEgNS4KICAgICAgc3BhbiBDw6FsY3VsbyBkZSBjb3N0b3MgeSBwcmVjaW8gZGUgdmVudGEKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctOS5tYi0zLm1iLWxnLTAKICAgICAgICAudGFibGEtYS5jb2xvci1hY2VudG8tYm90b25lcwogICAgICAgICAgdGFibGUKICAgICAgICAgICAgdGhlYWQKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGgudGV4dC1jZW50ZXIuYmctY29sb3ItMy50ZXh0LXdoaXRlKHdpZHRoPSIzMCUiKSBDb25jZXB0bwogICAgICAgICAgICAgICAgdGgudGV4dC1jZW50ZXIuYmctY29sb3ItMy50ZXh0LXdoaXRlIEPDoWxjdWxvCiAgICAgICAgICAgICAgICB0aC50ZXh0LWNlbnRlci5iZy1jb2xvci0zLnRleHQtd2hpdGUod2lkdGg9IjIwJSIpIFZhbG9yCiAgICAgICAgICAgIHRib2R5CiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLnRleHQtYm9sZCBDb3N0b3MgZGlyZWN0b3MKICAgICAgICAgICAgICAgIHRkLnRleHQtY2VudGVyIE1hdGVyaWEgcHJpbWEgKyBNYW5vIGRlIG9icmEgZGlyZWN0YQogICAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIgVmFyaWFibGUKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQudGV4dC1ib2xkIENvc3RvcyBpbmRpcmVjdG9zCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciBHYXN0b3MgYWRtaW5pc3RyYXRpdm9zICsgTWFudGVuaW1pZW50bwogICAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIgVmFyaWFibGUKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQudGV4dC1ib2xkIENvc3RvIHRvdGFsIGRlIHByb2R1Y2Npw7NuCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciBTdW1hIGRlIGNvc3RvcyBkaXJlY3RvcyBlIGluZGlyZWN0b3MKICAgICAgICAgICAgICAgIHRkLnRleHQtY2VudGVyIFZhcmlhYmxlCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLnRleHQtYm9sZCBDb3N0byB1bml0YXJpbwogICAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIgQ29zdG8gdG90YWwgLyBVbmlkYWRlcyBwcm9kdWNpZGFzCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciBWYXJpYWJsZQogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWJvbGQgUHJlY2lvIGRlIHZlbnRhIHN1Z2VyaWRvCiAgICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlciBDb3N0byB1bml0YXJpbyArIE1hcmdlbiBkZSBnYW5hbmNpYQogICAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIgVmFyaWFibGUKICAgICAgICBwLm1iLTAucC00LmJnLWNvbG9yLTQgTGEgaW50ZWdyYWNpw7NuIGRlIG1ldG9kb2xvZ8OtYXMgY29tbyBlbCA8Yj5hbsOhbGlzaXMgZGUgc2Vuc2liaWxpZGFkPC9iPiB5IGxhIDxiPnNpbXVsYWNpw7NuIGRlIGVzY2VuYXJpb3M8L2I+IG9wdGltaXphIGxhIGV2YWx1YWNpw7NuLCBwcm9wb3JjaW9uYW5kbyBpbmZvcm1hY2nDs24gcHJlY2lzYSBwYXJhIGFqdXN0YXIgZXN0cmF0ZWdpYXMgeSBhbGNhbnphciBvYmpldGl2b3MgZmluYW5jaWVyb3MuCgogICAgICAuY29sLWxnLTMKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzExLnN2ZyIsIGFsdD0iIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgCiAgICBoMi5tYi01KGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBDYXNvIFByw6FjdGljbzogSW50cm9kdWNjacOzbiBkZSB1bmEgbnVldmEgbMOtbmVhIGRlIHNtYXJ0d2F0Y2hlcyBlbiBUZWNub1dlYXIKICAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTkub3JkZXItMiAgCiAgICAgICAgcCA8ZW0+VGVjbm9XZWFyPC9lbT4sIGVtcHJlc2EgZGVsIHNlY3RvciB0ZWNub2zDs2dpY28sIHBsYW5lYSBleHBhbmRpciBzdSBwb3J0YWZvbGlvIGNvbiB1bmEgbnVldmEgbMOtbmVhIGRlIDxiPjxlbT5zbWFydHdhdGNoZXM8L2VtPjwvYj4uIExhIGV2YWx1YWNpw7NuIGRlIGNvc3RvcyBwZXJtaXRpcsOhIGRldGVybWluYXIgc3UgdmlhYmlsaWRhZCBlY29uw7NtaWNhIHkgZXN0YWJsZWNlciBlc3RyYXRlZ2lhcyBkZSBwcmVjaW9zIGNvbXBldGl0aXZvcy4KICAgICAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgICAgICBoNSBUYWJsYSA2LgogICAgICAgICAgc3BhbiBEYXRvcyBkZWwgY2FzbwogICAgICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgICAgICB0YWJsZQogICAgICAgICAgICB0aGVhZAogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0aC50ZXh0LWNlbnRlci5iZy1jb2xvci0zLnRleHQtd2hpdGUod2lkdGg9IjQwJSIpIENvbmNlcHRvCiAgICAgICAgICAgICAgICB0aC50ZXh0LWNlbnRlci5iZy1jb2xvci0zLnRleHQtd2hpdGUod2lkdGg9IjYwJSIpIFZhbG9yCiAgICAgICAgICAgIHRib2R5CiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLnRleHQtYm9sZCBQcm95ZWNjacOzbiBkZSB2ZW50YXMKICAgICAgICAgICAgICAgIHRkIDUsMDAwIHVuaWRhZGVzCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLnRleHQtYm9sZCBQcmVjaW8gZGUgdmVudGEgcHJveWVjdGFkbwogICAgICAgICAgICAgICAgdGQgJDIwMCBwb3IgdW5pZGFkCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLnRleHQtYm9sZCBDb3N0b3MgZGlyZWN0b3MgcG9yIHVuaWRhZAogICAgICAgICAgICAgICAgdGQgCiAgICAgICAgICAgICAgICAgIHAubWItMCA8Yj5NYXRlcmlhIHByaW1hIHkgY29tcG9uZW50ZXM6PC9iPiAkODAgIAogICAgICAgICAgICAgICAgICBwLm1iLTAgPGI+TWFubyBkZSBvYnJhIGRpcmVjdGE6PC9iPiAkMzAKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQudGV4dC1ib2xkIENvc3RvcyBpbmRpcmVjdG9zCiAgICAgICAgICAgICAgICB0ZCAKICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPlZhcmlhYmxlcyBpbmRpcmVjdG9zIHBvciB1bmlkYWQ8L2I+ICQyMCAgCiAgICAgICAgICAgICAgICAgIHAubWItMCA8Yj5GaWpvcyBhbnVhbGVzOiA8L2I+ICQxNTAuMDAwCgogICAgICAuY29sLWxnLTMub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEyLnN2ZyIsIGFsdD0iIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgQ8OhbGN1bG9zCiAgICBwLm1iLTUgQSBjb250aW51YWNpw7NuLCBzZSBwcmVzZW50YW4gbG9zIGPDoWxjdWxvcyBkZXRhbGxhZG9zIHBhcmEgbGEgcHJveWVjY2nDs24gZGUgY29zdG9zIHkgdXRpbGlkYWRlcyBlbiB1biBlc2NlbmFyaW8gZGUgcHJvZHVjY2nDs24gZXN0aW1hZGEuCgogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgIC5jb2wtbGctNC5vcmRlci0yCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMy5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAuY29sLWxnLTgub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgIAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJBc2lnbmFjacOzbiBkZSBjb3N0b3MgZmlqb3MiKQogICAgICAgICAgICBwIENvc3RvIGZpam8gcG9yIHVuaWRhZCA9ICQxNTAsMDAwIMO3IDUsMDAwID0gJDMwCiAgICAKICAgICAgICAgIC5kaXYodGl0dWxvPSJDb3N0byB0b3RhbCBwb3IgdW5pZGFkIikKICAgICAgICAgICAgcCAkODAgKG1hdGVyaWEgcHJpbWEpICsgJDMwIChtYW5vIGRlIG9icmEpICsgJDIwICh2YXJpYWJsZSBpbmRpcmVjdG8pICsgJDMwIChmaWpvIGFzaWduYWRvKSA9ICQxNjAKICAgIAogICAgICAgICAgLmRpdih0aXR1bG89IkZNYXJnZW4gZGUgY29udHJpYnVjacOzbiB5IHJlbnRhYmlsaWRhZCIpCiAgICAgICAgICAgIHAgTWFyZ2VuIHBvciB1bmlkYWQ6ICQyMDAgLSAkMTYwID0gJDQwCiAgICAgICAgICAgIHAgVXRpbGlkYWQgdG90YWwgcHJveWVjdGFkYTogNSwwMDAgdW5pZGFkZXMgw5cgJDQwID0gJDIwMCwwMDAKICAgIAogICAgLmJnLWZ1bGwtd2lkdGgtMi5iZy1mb25kby0yCiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBBbsOhbGlzaXMgeSBkZWNpc2nDs24gZXN0cmF0w6lnaWNhCiAgICAgICAgcC5tYi01IExhIGV2YWx1YWNpw7NuIGRlIGNvc3RvcyBpbmRpY2EgcXVlIGVsIGxhbnphbWllbnRvIGVzIGZpbmFuY2llcmFtZW50ZSB2aWFibGUuIFNpbiBlbWJhcmdvLCBwYXJhIG9wdGltaXphciBsYSByZW50YWJpbGlkYWQsIHNlIHB1ZWRlbiBhcGxpY2FyIGVzdHJhdGVnaWFzIGNvbW86CiAgICAgICAgZGl2LnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAgICAgZGl2LmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNC5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyICBPcHRpbWl6YWNpw7NuIGRlIG5lZ29jaWFjacOzbiBjb24gcHJvdmVlZG9yZXMgCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIFBhcmEgcmVkdWNpciBjb3N0b3MgZGUgbWF0ZXJpYSBwcmltYS4KICAgICAgICAgIGRpdi5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTQuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciAgUmV2aXNpw7NuIGRlIHByb2Nlc29zIGRlIHByb2R1Y2Npw7NuIAogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBQYXJhIG1lam9yYXIgbGEgZWZpY2llbmNpYSBlbiBsYSBtYW5vIGRlIG9icmEuCiAgICAgICAgCiAgICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE0LnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgIFJlYWp1c3RlIGRlbCBwcmVjaW8gZGUgdmVudGEgCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEVuIGZ1bmNpw7NuIGRlIGxhIHJlc3B1ZXN0YSBkZWwgbWVyY2FkbyB5IGxhIGNvbXBldGVuY2lhLgogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0xCiAgICAgIC5weC00LnB4LW1kLTUucHktNAogICAgICAgIHAubWItMCBFc3RlIGVzdHVkaW8gZGUgY2FzbyBkZW11ZXN0cmEgY8OzbW8gbGEgZXZhbHVhY2nDs24gZGUgY29zdG9zIGZvcnRhbGVjZSBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcywgcGVybWl0aWVuZG8gdW5hIG1lam9yIGFzaWduYWNpw7NuIGRlIHJlY3Vyc29zIHkgYXNlZ3VyYW5kbyBsYSBzb3N0ZW5pYmlsaWRhZCBmaW5hbmNpZXJhIGRlIGxhIG9yZ2FuaXphY2nDs24uCgoKCgogICAKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cudXYubXgvcGVyc29uYWwvYWxzYWxhcy9maWxlcy8yMDEzLzAyL1BSRVNVUFVFU1RPUy1JX0lJLnBkZiIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEZ1bmNpw7NuIFDDumJsaWNhLiAobi5kLikuIFJlbGFjacOzbiBlbnRyZSBwcmVzdXB1ZXN0bywgcGxhbmVhY2nDs24gZXN0cmF0w6lnaWNhIHkgdG9tYSBkZSBkZWNpc2lvbmVzLiAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cudXYubXgvcGVyc29uYWwvYWxzYWxhcy9maWxlcy8yMDEzLzAyL1BSRVNVUFVFU1RPUy1JX0lJLnBkZi4gIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgVW5pdmVyc2lkYWQgVmVyYWNydXphbmEuICgyMDEzKS4gUHJlc3VwdWVzdG9zIEkgeSBJSS4gUmVjdXBlcmFkbyBkZSAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WjBaRE1DUjhXeXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBSYW3DrXJleiBQLiAoMjAxOSwganVuaW8gMTEpLiBDb250cm9sIHkgY29zdGVvIGRlIHByb2R1Y2Npw7NuLiBVbml2ZXJzaWRhZCBjb250aW5lbnRhbC1Nb2RhbGlkYWQgYSBkaXN0YW5jaWEuIFtWaWRlb10gWW91VHViZS4gCgogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCgo="},null]}